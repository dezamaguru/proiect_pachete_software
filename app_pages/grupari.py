import streamlit as st
import pandas as pd
import numpy as np
from pandas import read_excel
import matplotlib.pyplot as plt
import seaborn as sns

def show_grupari_page(df_games):
    st.header("GrupÄƒri È™i AgregÄƒri")

    st.info(
        """
        **AceastÄƒ secÈ›iune Ã®È›i permite sÄƒ analizezi datele Nintendo prin metode statistice.**  
        PoÈ›i grupa datele dupÄƒ anumite atribute È™i sÄƒ aplici agregÄƒri precum:
        - **Media** unei variabile numerice.
        - **Minimul È™i maximul** pentru diverse atribute.
        - **DistribuÈ›ia valorilor pe categorii.**
        """
    )

    df_cleaned = read_excel("./dataOUT/outliers.xlsx")
    df_games = pd.DataFrame(df_cleaned, columns=df_games.columns)
    df_games["Price"] = pd.to_numeric(df_games["Price"], errors='coerce')

    # Alegem o coloanÄƒ pentru grupare
    group_by_column = st.selectbox("SelectaÈ›i coloana dupÄƒ care se face gruparea:", df_games.columns)

    # Alegem metoda de agregare
    agg_method = st.selectbox(
        "Alege metoda de agregare:",
        ["Media", "Minim È™i Maxim", "DistribuÈ›ie CategoricÄƒ"]
    )

    df_grouped = df_games.copy()

    if agg_method == "Media":
        numeric_cols = df_games.select_dtypes(include=[np.number]).columns.tolist()
        numeric_cols.remove("Year")  # Excludem Year pentru cÄƒ nu are sens media anilor
        selected_col = st.selectbox("SelecteazÄƒ o coloanÄƒ numericÄƒ pentru medie:", numeric_cols)

        df_grouped = df_games.groupby(group_by_column)[selected_col].mean().reset_index()
        df_grouped.rename(columns={selected_col: f"Media {selected_col}"}, inplace=True)


    elif agg_method == "Minim È™i Maxim":
        numeric_cols = df_games.select_dtypes(include=[np.number]).columns.tolist()
        selected_col = st.selectbox("SelecteazÄƒ o coloanÄƒ numericÄƒ:", numeric_cols)
        min_or_max = st.radio("Alege tipul de agregare:", ["Minim", "Maxim"])
        df_grouped = df_games.groupby(group_by_column)[selected_col].agg(["min", "max"]).reset_index()
        if min_or_max == "Minim":
            df_grouped = df_grouped[[group_by_column, "min"]].rename(columns={"min": f"Minim {selected_col}"})
        elif min_or_max == "Maxim":
            df_grouped = df_grouped[[group_by_column, "max"]].rename(columns={"max": f"Maxim {selected_col}"})
        st.subheader(f"Rezultatele pentru {min_or_max} {selected_col}:")
        st.dataframe(df_grouped)


    elif agg_method == "DistribuÈ›ie CategoricÄƒ":
        categorical_cols = df_games.select_dtypes(include=["object"]).columns.tolist()
        selected_col = st.selectbox("SelecteazÄƒ o coloanÄƒ categoricÄƒ:", categorical_cols)

        df_grouped = df_games[selected_col].value_counts().reset_index()
        df_grouped.columns = [selected_col, "FrecvenÈ›Äƒ"]

        # ğŸ”¹ AfiÈ™Äƒm un grafic pentru distribuÈ›ia categoricÄƒ
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.barplot(x=df_grouped[selected_col], y=df_grouped["FrecvenÈ›Äƒ"], palette="viridis", ax=ax)
        plt.xticks(rotation=45)
        plt.title(f"DistribuÈ›ia categoricÄƒ a {selected_col}")
        plt.xlabel(selected_col)
        plt.ylabel("FrecvenÈ›Äƒ")
        st.pyplot(fig)

    # AfiÈ™Äƒm rezultatul
    st.subheader("Rezultatele grupÄƒrii È™i agregÄƒrii:")
    st.dataframe(df_grouped)